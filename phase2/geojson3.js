"use strict"; // code generated by pbf v3.2.1

var GeomType = (exports.GeomType = {
  UNKNOWN: {
    value: 0,
    options: {},
  },
  POINT: {
    value: 1,
    options: {},
  },
  LINESTRING: {
    value: 2,
    options: {},
  },
  POLYGON: {
    value: 3,
    options: {},
  },
  MULTIPOINT: {
    value: 4,
    options: {},
  },
  MULTILINESTRING: {
    value: 5,
    options: {},
  },
  MULTIPOLYGON: {
    value: 6,
    options: {},
  },
});

// Value ========================================

var Value = (exports.Value = {});

Value.read = function (pbf, end) {
  return pbf.readFields(
    Value._readField,
    {
      string_value: "",
      float_value: 0,
      double_value: 0,
      int_value: 0,
      uint_value: 0,
      sint_value: 0,
      bool_value: false,
    },
    end
  );
};
Value._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.string_value = pbf.readString();
  else if (tag === 2) obj.float_value = pbf.readFloat();
  else if (tag === 3) obj.double_value = pbf.readDouble();
  else if (tag === 4) obj.int_value = pbf.readVarint(true);
  else if (tag === 5) obj.uint_value = pbf.readVarint();
  else if (tag === 6) obj.sint_value = pbf.readSVarint();
  else if (tag === 7) obj.bool_value = pbf.readBoolean();
};
Value.write = function (obj, pbf) {
  if (obj.string_value) pbf.writeStringField(1, obj.string_value);
  if (obj.float_value) pbf.writeFloatField(2, obj.float_value);
  if (obj.double_value) pbf.writeDoubleField(3, obj.double_value);
  if (obj.int_value) pbf.writeVarintField(4, obj.int_value);
  if (obj.uint_value) pbf.writeVarintField(5, obj.uint_value);
  if (obj.sint_value) pbf.writeSVarintField(6, obj.sint_value);
  if (obj.bool_value) pbf.writeBooleanField(7, obj.bool_value);
};

// Feature ========================================

var Feature = (exports.Feature = {});

Feature.read = function (pbf, end) {
  return pbf.readFields(
    Feature._readField,
    { Id: 0, Properties: {}, type: 0, Geometry: [], BoundingBox: [] },
    end
  );
};
Feature._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.Id = pbf.readVarint();
  else if (tag === 2) {
    var entry = Feature._FieldEntry2.read(pbf, pbf.readVarint() + pbf.pos);
    obj.Properties[entry.key] = entry.value;
  } else if (tag === 3) obj.type = pbf.readVarint();
  else if (tag === 4) pbf.readPackedVarint(obj.Geometry);
  else if (tag === 5) pbf.readPackedVarint(obj.BoundingBox, true);
};
Feature.write = function (obj, pbf) {
  if (obj.id) pbf.writeVarintField(1, obj.Id);
  console.log("Feature.write", obj);
  if (obj.properties)
    for (var i in obj.properties)
      if (Object.prototype.hasOwnProperty.call(obj.properties, i))
        pbf.writeMessage(2, Feature._FieldEntry2.write, {
          key: i,
          value: obj.properties[i],
        });
  if (obj.type) pbf.writeVarintField(3, obj.type);
  if (obj.geometry) pbf.writePackedVarint(4, obj.geometry);
  if (obj.BoundingBox) pbf.writePackedVarint(5, obj.BoundingBox);
};

// Feature._FieldEntry2 ========================================

Feature._FieldEntry2 = {};

Feature._FieldEntry2.read = function (pbf, end) {
  return pbf.readFields(
    Feature._FieldEntry2._readField,
    { key: "", value: null },
    end
  );
};
Feature._FieldEntry2._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.key = pbf.readString();
  else if (tag === 2) obj.value = Value.read(pbf, pbf.readVarint() + pbf.pos);
};
Feature._FieldEntry2.write = function (obj, pbf) {
  if (obj.key) pbf.writeStringField(1, obj.key);
  if (obj.value) pbf.writeMessage(2, Value.write, obj.value);
};

// FeatureCollection ========================================

var FeatureCollection = (exports.FeatureCollection = {});

FeatureCollection.read = function (pbf, end) {
  return pbf.readFields(FeatureCollection._readField, { Features: [] }, end);
};
FeatureCollection._readField = function (tag, obj, pbf) {
  if (tag === 1)
    obj.Features.push(Feature.read(pbf, pbf.readVarint() + pbf.pos));
};
FeatureCollection.write = function (obj, pbf) {
  console.log("FeatureCollection.write", obj);
  if (obj.features)
    for (var i = 0; i < obj.features.length; i++)
      pbf.writeMessage(1, Feature.write, obj.features[i]);
};
